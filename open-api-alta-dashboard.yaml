openapi: 3.0.0
info:
  description: |
    Dokumen Open API Aplikasi Alta Immersive Dashboard
  version: "1.0.0"
  title: Immersive Dashboard App Project
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license: 
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: Base URL Server GCP
    url: http://54.179.170.113:8000
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/YUSNARSETIYADI150403/OPEN-API-DASHBOARD/1.0.0
  - description: BE servers
    url: https://{environment}.api.alta.id
    variables:
      environment:
        default: dev
        enum:
          - "dev"
          - "prod"
tags:
  - name: Dashboard 
    description: API menampilkan inforamsi dashboard
  - name: Auth
    description:  API mengelola fitur Auth
  - name: Users 
    description: API mengelola fitur User  
  - name: Classes
    description:  API mengelola fitur Class  
  - name: Mentees
    description:  API mengelola fitur Mentee
  - name: Logs
    description:  API mengelola fitur Log / Feedback mentee
  - name: Data
    description:  API mengelola data statik yang dibutuhkan aplikasi


paths:

### Endpoint Auth
  /login:
    post:
      summary: "Login User"
      tags:
      - "Auth"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              properties:
                "email":
                  type: string
                "password":
                  type: string
            example:
              email: "budi123@gmail.com"
              password: "123"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "Login Success"
                data:
                  id: 1
                  full_name: "Budiman"
                  email: "budi123@gmail.com"
                  team: "Academic"
                  role: "User"
                  status: "Active"
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2NzAwMzYwMjcsInJvbGUiOiJ1c2VyIiwidXNlcklkIjoxfQ.pT-FmSraUUb8HY73ofYbbt3vFgbej0XaHP9VMas8Q44"
        "400" :
          $ref : "#/components/responses/400"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

### Endpoint Dashboard
  /dashboard:
    get:
      summary: "Dashboard App Immersive Alta"
      security:
        - JWTAuth: []
      tags:
      - "Dashboard"
      responses:
        "200":
          description: "Immersive Dashboard"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                status: "Success"
                message: "Dashboard App Immersive Alta"
                data:
                 user: "Hello, Budiman"
                 Mentee_Active: 100 Mentee
                 Mentee_Placement: 20 Mentee
                 Mentee_Feedback: 50 Feedback
        "400" :
          $ref : "#/components/responses/400"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    

### Endpoint Users
  /users:
    post:
      tags:
        - Users
      summary: "Create User" 
      description: "Register User with Role = User."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InsertUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '201':
          description: "Success Create User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "User successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    get:
      tags:
        - Users
      summary: "Get All Users And Search by name"
      description: "Get all users and can use query parameter to search. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: ""
          description: "No value in parameter."
          required: false
          in: query
          schema:
            type: string
            example: ""
        - name: name
          description: "nama user"
          required: false
          in: query
          schema:
            type: string
            example: "budiman"
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccesArrayUserResult"
              example:
                  status: "Success"
                  message: "Success get all users"
                  data:
                    - id: 1
                      full_name: "Budiman"
                      email: "budi123@gmail.com"
                      team: "Academic"
                      role: "User"
                      status: "Active" 
                    - id: 2
                      full_name: "Jasiman"
                      email: "Jasiman123@gmail.com"
                      team: "Academic"
                      role: "Admin"
                      status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /users/{id}:
    get:
      tags:
        - Users
      summary: "Get User by Id"
      description: "Get data user using id user at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to get data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Get User by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success Get User by Id"
                  data:
                    id: 1
                    full_name: "Jasiman"
                    email: "Jasiman123@gmail.com"
                    team: "Academic"
                    role: "User"
                    status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - Users
      summary: "Update User"
      description: "Update User using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to update data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/EditUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '200':
          description: "Success update User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update user."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Users
      summary: "Delete User"
      description: "Delete User using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to delete data."
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete User."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete user"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

### Endpoint Classses
  /classes:
    post:
      tags:
        - Classes
      summary: "Create Class" 
      description: "Create New Class"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InsertClassObject"
            example:
              name: "Frontend Engineer Batch 10"
              user_id: "1"
      responses:
        '201':
          description: "Success Create Class"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                status: "Success"
                message: "Success Create New Class"
                data:
                  id: 1
                  name: "Frontend Engineer Batch 10"
                  user_id: "1"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    get:
      tags:
        - Classes
      summary: "Get All Class And Search"
      description: "Get all class and can use query parameter to search. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: ""
          description: "No value in parameter."
          required: false
          in: query
          schema:
            type: string
            example: ""
        - name: name
          description: "Class Name"
          required: false
          in: query
          schema:
            type: string
            example: "Frontend Engineer Batch 10"
      responses:
        '200':
          description: A list of classes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccesArrayClassResult"
              example:
                  status: "Success"
                  message: "Success get all class"
                  data:
                    - id: 1
                      name: "Frontend Engineer Batch 10"
                      user_id: "1"
                    - id: 2
                      name: "Backend Engineer Batch 13"
                      user_id: "2"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /classes/{id}:
    get:
      tags:
        - Classes
      summary: "Get Class by Id"
      description: "Get Class using id class at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id class to get data"
          required: true
          in: path
          schema:
            description: "Id class 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Get Class by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success Get Class by Id"
                  data:
                    id: 1
                    name: "Frontend Engineer Batch 10"
                    user_id: "1"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - Classes
      summary: "Update Class"
      description: "Update Class using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id class to update data"
          required: true
          in: path
          schema:
            description: "Id class 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/EditClassObject"
            example:
              name: "Frontend Engineer Batch 10"
              user_id: "1"
      responses:
        '200':
          description: "Success Update Class"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update Class"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Classes
      summary: "Delete Class"
      description: "Delete Class using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id class to delete data."
          required: true
          in: path
          schema:
            description: "Id class 1."
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete Class"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Delete Class"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

### Endpoint Mentees
  /mentees:
    post:
      tags:
        - Mentees
      summary: "Create Mentee" 
      description: "Create New Mentee"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InsertMenteeObject"
            example:
              name: "Budiman"
              status: "Active"
              gender: "Male"
              nickname: "Budi"
              address: "Jl. Srengseng Sawah No.17, RW.12, Srengseng Sawah, Kec. Jagakarsa, Kota Jakarta Selatan, Daerah Khusus Ibukota Jakarta 12630"
              home_address: "Jl. Srengseng Sawah No.17, RW.12, Srengseng Sawah, Kec. Jagakarsa, Kota Jakarta Selatan, Daerah Khusus Ibukota Jakarta 12630"
              email: "budi@mail.com"
              telegram: "budidoremi"
              discord: "budidiscord"
              phone: "08123989907"
              emegency_name: "YantoFebrian"
              emergency_phone: "08456938383"
              emergency_status: "Orang Tua"
              education_type: "Informatic"
              education_major: "Sarjana"
              education_graduate: "2021"
              class_id: 1
      responses:
        '201':
          description: "Success create data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "Success add data."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    get:
      tags:
        - Mentees
      summary: "Get All Mentees with Search By Name and Filter Result."
      description: "Get all mentee, query parameter to search by name and filter by status, category and class. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: ""
          description: "No value in parameter."
          required: false
          in: query
          schema:
            type: string
            example: ""
        - name: name
          description: "Mentee Name"
          required: false
          in: query
          schema:
            type: string
            example: "budiman"
        - name: class_id
          in: query
          description: "Filter result by class."
          required: false 
          schema:
            type: integer
          examples:
            1:
              description: "Id Class = 1. Show mentees where class id = 1."
              value: 1
            2:
              description: "Id Class = 2. Show mentees where class id = 2."
              value: 2
        - name: status
          in: query
          description: "Filter result by mentee status."
          required: false 
          schema:
            type: string
          examples:
            "Placement":
              description: "Status = Placement. Show mentees where status mentee = placement."
              value: "Placement"
            "Eleminate":
              description: "Status = Elemintate. Show mentees where status mentee = eleminate."
              value: "Eleminate"
        - name: education_type
          in: query
          description: "Filter result by education type."
          required: false 
          schema:
            type: string
          examples:
            "Informatic":
              description: "Category = Informatic. Show mentees where status mentee from informatic major."
              value: "Informatic"
            "Non-Informatic":
              description: "Category = Non-Informatic. Show mentees where status mentee from non-informatic major."
              value: "Non-Informatic"
      responses:
        '200':
          description: A list of mentees
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccesArrayMenteeListResult"
              example:
                  status: "Success"
                  message: "Success get all mentees"
                  data:
                    - id: 1
                      name: "Budiman"
                      class_name: "Frontend Engineer Batch 10"
                      status: "Active"
                      education_type: "Informatic"
                      gender: "Male"
                      class_id: 1
                    - id: 2
                      name: "Jasiman"
                      class_name: "Backend Engineer Batch 13"
                      status: "Non-Active"
                      education_type: "Non-Informatic"
                      gender: "Male"
                      class_id: 2
                      
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
  /mentees/{id}:
    get:
      tags:
        - Mentees
      summary: "Get data mentee by id mentee"
      description: "Get data mentee using id mentee at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id mentee to get data"
          required: true
          in: path
          schema:
            description: "Id mentee 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success get mentee by id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMenteeResult"
              example:
                status: "Success"
                message: "Success get mentee by id"
                data:
                  id: 1
                  name: "Budiman"
                  status: "Active"
                  gender: "Male"
                  nickname: "Budi"
                  address: "Jl. Srengseng Sawah No.17, RW.12, Srengseng Sawah, Kec. Jagakarsa, Kota Jakarta Selatan, Daerah Khusus Ibukota Jakarta 12630"
                  home_address: "Jl. Srengseng Sawah No.17, RW.12, Srengseng Sawah, Kec. Jagakarsa, Kota Jakarta Selatan, Daerah Khusus Ibukota Jakarta 12630"
                  email: "budi@mail.com"
                  telegram: "budidoremi"
                  discord: "budidiscord"
                  phone: "08123989907"
                  emegency_name: "YantoFebrian"
                  emergency_phone: "08456938383"
                  emergency_status: "Orang Tua"
                  education_type: "Informatic"
                  education_major: "Sarjana"
                  education_graduate: "2021"
                  class_id: 1
                  logs:
                  - id: 1
                    title: "Interview"
                    fullname_user: "Ismail"
                    create_date: "03 November 2022"
                    feedback: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla interdum convallis tortor eget scelerisque. Sed diam risus, tincidunt at lacinia a, hendrerit at massa. Maecenas tincidunt convallis rhoncus. Maecenas augue tellus, interdum non nulla a, bibendum dapibus nulla. Nullam at lorem diam. Integer nec urna commodo, gravida est fringilla, ultricies velit. Suspendisse potenti."
                    status: "None"
                    mentee_id: 1
                    user_id: 1
                  - id: 2
                    title: "Acceptance"
                    fullname_user: "Yovan"
                    create_date: "03 December 2022"
                    feedback: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla interdum convallis tortor eget scelerisque. Sed diam risus, tincidunt at lacinia a, hendrerit at massa. Maecenas tincidunt convallis rhoncus. Maecenas augue tellus, interdum non nulla a, bibendum dapibus nulla. Nullam at lorem diam. Integer nec urna commodo, gravida est fringilla, ultricies velit. Suspendisse potenti."
                    status: "Join class"
                    mentee_id: 1
                    user_id: 3
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - Mentees
      summary: "Update data Mentee"
      description: "Update data mentee using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id mentee to update data"
          required: true
          in: path
          schema:
            description: "Id mentee 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditMenteeObject"
            example:
              name: "Budiman"
              status: "Active"
              gender: "Male"
              nickname: "Budi"
              address: "Jl. Srengseng Sawah No.17, RW.12, Srengseng Sawah, Kec. Jagakarsa, Kota Jakarta Selatan, Daerah Khusus Ibukota Jakarta 12630"
              home_address: "Jl. Srengseng Sawah No.17, RW.12, Srengseng Sawah, Kec. Jagakarsa, Kota Jakarta Selatan, Daerah Khusus Ibukota Jakarta 12630"
              email: "budi@mail.com"
              telegram: "budidoremi"
              discord: "budidiscord"
              phone: "08123989907"
              emegency_name: "YantoFebrian"
              emergency_phone: "08456938383"
              emergency_status: "Orang Tua"
              education_type: "Informatic"
              education_major: "Sarjana"
              education_graduate: "2021"
              class_id: 1
      responses:
        '200':
          description: "Success update data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success update mentee"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Mentees
      summary: "Delete Mentee"
      description: "Delete Mentee using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id mentee to delete"
          required: true
          in: path
          schema:
            description: "Id mentee 1."
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete Mentee"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Delete Mentee"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

### Endpoint Logs
  /logs:
    post:
      tags:
        - Logs
      summary: "Create Log/Feedback" 
      description: "Create New Log/Feedback"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InsertLogObject"
            example:
              title: "Interview"
              feedback: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla interdum convallis tortor eget scelerisque. Sed diam risus, tincidunt at lacinia a, hendrerit at massa. Maecenas tincidunt convallis rhoncus. Maecenas augue tellus, interdum non nulla a, bibendum dapibus nulla. Nullam at lorem diam. Integer nec urna commodo, gravida est fringilla, ultricies velit. Suspendisse potenti."
              status: "Join class"
              mentee_id: 1
      responses:
        '201':
          description: "Success create data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "Success add data."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    get:
      tags:
        - Logs
      summary: "Get All Logs belongs to user And Search by title"
      description: "Get all log belongs to user and can use query parameter to search by title. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: ""
          description: "No value in parameter."
          required: false
          in: query
          schema:
            type: string
            example: ""
        - name: name
          description: "Title log"
          required: false
          in: query
          schema:
            type: string
            example: "interview"
      responses:
        '200':
          description: A list of logs/feedback
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccesArrayLogResult"
              example:
                  status: "Success"
                  message: "Success get all logs"
                  data:
                  - id: 1
                    title: "Interview"
                    fullname_user: "Ismail"
                    create_date: "03 November 2022"
                    feedback: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla interdum convallis tortor eget scelerisque. Sed diam risus, tincidunt at lacinia a, hendrerit at massa. Maecenas tincidunt convallis rhoncus. Maecenas augue tellus, interdum non nulla a, bibendum dapibus nulla. Nullam at lorem diam. Integer nec urna commodo, gravida est fringilla, ultricies velit. Suspendisse potenti."
                    status: "None"
                    mentee_id: 1
                    user_id: 1
                  - id: 2
                    title: "Acceptance"
                    fullname_user: "Yovan"
                    create_date: "03 December 2022"
                    feedback: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla interdum convallis tortor eget scelerisque. Sed diam risus, tincidunt at lacinia a, hendrerit at massa. Maecenas tincidunt convallis rhoncus. Maecenas augue tellus, interdum non nulla a, bibendum dapibus nulla. Nullam at lorem diam. Integer nec urna commodo, gravida est fringilla, ultricies velit. Suspendisse potenti."
                    status: "Join class"
                    mentee_id: 3
                    user_id: 1
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - Logs
      summary: "Update data Log"
      description: "Update data Log using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id log to update data"
          required: true
          in: path
          schema:
            description: "Id log 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditLogObject"
            example:
              id: 1
              title: "Acceptance"
              fullname_user: "Yovan"
              create_date: "03 December 2022"
              feedback: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla interdum convallis tortor eget scelerisque. Sed diam risus, tincidunt at lacinia a, hendrerit at massa. Maecenas tincidunt convallis rhoncus. Maecenas augue tellus, interdum non nulla a, bibendum dapibus nulla. Nullam at lorem diam. Integer nec urna commodo, gravida est fringilla, ultricies velit. Suspendisse potenti."
              status: "Join class"
              mentee_id: 1
      responses:
        '200':
          description: "Success update data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update Log"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Logs
      summary: "Delete Log"
      description: "Delete Log using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id log to delete"
          required: true
          in: path
          schema:
            description: "Id log 1."
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete Log"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Delete Log"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

#### Data Endpoint
  /data:
    get:
      tags:
        - Data
      summary: "Get All Static Data"
      description: "Get all static data that api needed."
      security:
        - JWTAuth: []
      responses:
        '200':
          description: A list of data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success get all data"
                  data:
                    mentee_status: [
                      "None",
                      "Active",
                      "Non-Active",
                      "Interview",
                      "Join Class",
                      "Unit 1",
                      "Unit 2",
                      "Unit 3",
                      "Repeat Unit 1",
                      "Repeat Unit 2",
                      "Repeat Unit 3",
                      "Placement",
                      "Eleminated",
                      "Graduate", 
                    ]
                    mentee_emergency_status: [
                      "Orang Tua",
                      "Kakek Nenek",
                      "Saudara Kandung",
                      "Saudara dari Orang Tua",
                    ]
                    mentee_education_type: [
                      "Informatics",
                      "Non-Informatics",
                    ]
                    mentee_gender: [
                      "Male",
                      "Female",
                    ]
                    team: [
                      "Mentor",
                      "Academic",
                      "PeopleSkill",
                      "Placement",
                      "Admission"
                    ]                    
                    role: [
                      "Admin",
                      "User",
                    ]                    
                    user_status: [
                      "Active",
                      "Non-Active",
                      "Deleted",
                    ]                    

        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

####################################
#  COMPONENTS
####################################
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT Token that generate after login."

  schemas:

### User Schemas
    "GetUserObject":
      type: object
      properties:
        "id":
          type: integer
        "full_name":
          type: string
        "email":
          type: string
        "team":
          type: string
        "role":
          type: string
        "status":
          type: string    
    "ArrayUserObj":
      type: array
      items :
        $ref: "#/components/schemas/GetUserObject"
    "InsertUserObject":
      type: object
      properties:
        "full_name":
          type: string
        "email":
          type: string
        "password":
          type: string
        "team":
          type: string
        "status":
          type: string  
    "EditUserObject":
      type: object
      properties:
        "full_name":
          type: string
        "email":
          type: string
        "password":
          type: string
        "team":
          type: string
        "status":
          type: string

### Class Schemas
    "GetClassObject":
      type: object
      properties:
        "id":
          type: integer
        "name":
          type: string
        "user_id":
          type: string
    "ArrayClassObj":
      type: array
      items :
        $ref: "#/components/schemas/GetClassObject"
    "InsertClassObject":
      type: object
      properties:
        "name":
          type: string
        "user_id":
          type: string
    "EditClassObject":
      type: object
      properties:
        "name":
          type: string
        "user_id":
          type: string 

### Mentee Schemas
    "GetMenteeListObject":
      type: object
      properties:
        "id":
          type: integer
        "name":
          type: string
        "class_name":
          type: string
        "status":
          type: string
        "education_type":
          type: string    
        "gender":
          type: string
        "class_id":
          type: string      
    "ArrayMenteeListObj":
      type: array
      items :
        $ref: "#/components/schemas/GetMenteeListObject"
    "GetMenteeObject":
      type: object
      properties:
        "id":
          type: integer
        "name":
          type: string
        "status":
          type: string
        "gender":
          type: string
        "nickname":
          type: string
        "address":
          type: string    
        "home_address":
          type: string    
        "email":
          type: string    
        "telegram":
          type: string    
        "discord":
          type: string    
        "phone":
          type: string    
        "emergency_name":
          type: string    
        "emergency_phone":
          type: string    
        "emergency_status":
          type: string    
        "education_type":
          type: string    
        "education_major":
          type: string    
        "education_graduate":
          type: string    
        "class":
          type: string      
        "class_id":
          type: integer 
        "logs":
          type: array
          items:
            $ref: "#/components/schemas/ArrayLogObj"  
    "ArrayMenteeObj":
      type: array
      items :
        $ref: "#/components/schemas/GetMenteeObject"
    "InsertMenteeObject":
      type: object
      properties:
        "name":
          type: string
        "status":
          type: string
        "gender":
          type: string
        "nickname":
          type: string
        "address":
          type: string    
        "home_address":
          type: string    
        "email":
          type: string    
        "telegram":
          type: string    
        "discord":
          type: string    
        "phone":
          type: string    
        "emergency_name":
          type: string    
        "emergency_phone":
          type: string    
        "emergency_status":
          type: string    
        "education_type":
          type: string    
        "education_major":
          type: string    
        "education_graduate":
          type: string    
        "class_id":
          type: string   
    "EditMenteeObject":
      type: object
      properties:
        "name":
          type: string
        "status":
          type: string
        "gender":
          type: string
        "nickname":
          type: string
        "address":
          type: string    
        "home_address":
          type: string    
        "email":
          type: string    
        "telegram":
          type: string    
        "discord":
          type: string    
        "phone":
          type: string    
        "emergency_name":
          type: string    
        "emergency_phone":
          type: string    
        "emergency_status":
          type: string    
        "education_type":
          type: string    
        "education_major":
          type: string    
        "education_graduate":
          type: string    
        "class_id":
          type: string    

### Log Schemas
    "GetLogObject":
      type: object
      properties:
        "id":
          type: integer
        "title":
          type: string
        "fullname_user":
          type: string
        "created_date":
          type: string
        "feedback":
          type: string  
        "status":
          type: string  
        "mentee_id":
          type: integer  
        "user_id":
          type: integer  
    "ArrayLogObj":
      type: array
      items :
        $ref: "#/components/schemas/GetLogObject"
    "InsertLogObject":
      type: object
      properties:
        "title":
          type: string
        "feedback":
          type: string  
        "status":
          type: string  
        "mentee_id":
          type: integer  
        "user_id":
          type: integer  
    "EditLogObject":
      type: object
      properties:
        "title":
          type: string
        "feedback":
          type: string  
        "status":
          type: string  
        "mentee_id":
          type: integer  
        "user_id":
          type: integer  

### Other Schemas
    "ResponseWithoutData":
      type: object
      properties:
        status:
          type: string
        message:
          type: string
    "ResponseWithData":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          type: object
    "SuccesArrayUserResult":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          type: array
          items : 
            $ref: "#/components/schemas/ArrayUserObj"
    "SuccesArrayClassResult":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          type: array
          items : 
            $ref: "#/components/schemas/ArrayClassObj" 
    "SuccesArrayMenteeListResult":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          type: array
          items : 
            $ref: "#/components/schemas/ArrayMenteeListObj" 
    "SuccessMenteeResult":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          $ref: "#/components/schemas/GetMenteeObject" 
    "SuccesArrayMenteeResult":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          type: array
          items : 
            $ref: "#/components/schemas/ArrayMenteeObj" 
    "SuccesArrayLogResult":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          type: array
          items : 
            $ref: "#/components/schemas/ArrayLogObj" 

### Responses Schemas
  responses:
    '200':
      description: "Success Process Data"
      content:
        application/json:
          schema:
            type: object
            properties:
              message: 
                type: string
              data:
                type: object
    '201':
      description: "Success Create Data"
      content:
        application/json:
          schema:
            type: object
            properties:
              message: 
                type: string
              data:
                type: object
    '400':
      description: "Wrong Request From User"
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. Please check your input."
    '401':
      description: "Authorization information is missing or invalid."
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. User not authorized for this request."
    '404':
      description: "Page not found or wrong url. Please check again."
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. User not authorized for this request."
    '500':
      description: "Error process on server"
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. Please check server."