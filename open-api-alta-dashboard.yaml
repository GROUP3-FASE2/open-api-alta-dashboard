openapi: 3.0.0
info:
  description: |
    Dokumen Open API Aplikasi Alta Immersive Dashboard
  version: "1.0.0"
  title: Immersive Dashboard App Project
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license: 
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: Base URL Server GCP
    url: http://54.179.170.113:8000
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/YUSNARSETIYADI150403/OPEN-API-DASHBOARD/1.0.0
  - description: BE servers
    url: https://{environment}.api.alta.id
    variables:
      environment:
        default: dev
        enum:
          - "dev"
          - "prod"
tags:
  - name: Dashboard 
    description: API menampilkan inforamsi dashboard
  - name: Auth
    description:  API mengelola fitur Auth
  - name: Users #login, register, lihat profile user, update profile user, delelte profile (non aktif dgn delete gorm)
    description: API mengelola fitur User  
  - name: Classes
    description:  API mengelola fitur Class  
  - name: Mentees
    description:  API mengelola fitur Mentee
  - name: Logs
    description:  API mengelola fitur Log / Feedback mentee


paths:

### Endpoint Auth
  /login:
    post:
      summary: "Login User"
      tags:
      - "Auth"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              properties:
                "email":
                  type: string
                "password":
                  type: string
            example:
              email: "budi123@gmail.com"
              password: "123"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                status: "Success"
                message: "Login Success"
                data:
                  id: 1
                  full_name: "Budiman"
                  email: "budi123@gmail.com"
                  team: "Academic"
                  role: "User"
                  status: "Active"
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2NzAwMzYwMjcsInJvbGUiOiJ1c2VyIiwidXNlcklkIjoxfQ.pT-FmSraUUb8HY73ofYbbt3vFgbej0XaHP9VMas8Q44"
        "400" :
          $ref : "#/components/responses/400"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

### Endpoint Dashboard
  /dashboard:
    get:
      summary: "Dashboard App Immersive Alta"
      tags:
      - "Dashboard"
      responses:
        "200":
          description: "Immersive Dashboard"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                status: "Success"
                message: "Dashboard App Immersive Alta"
                data:
                 user: "Hello, Budiman"
                 Mentee_Active: 20
                 Mentee_Placement: 10
                 Mentee_Feedback: 50
        "400" :
          $ref : "#/components/responses/400"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    

### Endpoint Users
  /users:
    post:
      tags:
        - Users
      summary: "Insert Data User" 
      description: "Register User dengan role User. Field role otomatis akan diinput user."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InsertUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '201':
          description: "Success create data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                status: "Success"
                message: "User successfully created"
                data:
                  id: 1
                  full_name: "Budiman"
                  email: "budi123@gmail.com"
                  team: "Academic"
                  role: "User"
                  status: "Active"  
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    get:
      tags:
        - Users
      summary: "Get All Users And Search"
      description: "Get all users and can use query parameter to search. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: ""
          description: "No value in parameter."
          required: false
          in: query
          schema:
            type: string
            example: ""
        - name: name
          description: "nama user"
          required: false
          in: query
          schema:
            type: string
            example: "budi"
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccesArrayUserResult"
              example:
                  status: "Success"
                  message: "Success get all users"
                  data:
                    - id: 1
                      full_name: "Budiman"
                      email: "budi123@gmail.com"
                      team: "Academic"
                      role: "User"
                      status: "Active" 
                    - id: 2
                      full_name: "Jasiman"
                      email: "Jasiman123@gmail.com"
                      team: "Academic"
                      role: "User"
                      status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /users/{id}:
    get:
      tags:
        - Users
      summary: "Get data user by id user"
      description: "Get data user using id user at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to get data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success get user by id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success get users by id"
                  data:
                    id: 1
                    full_name: "Jasiman"
                    email: "Jasiman123@gmail.com"
                    team: "Academic"
                    role: "User"
                    status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - Users
      summary: "Update data User"
      description: "Update data user using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to update data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/EditUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '200':
          description: "Success update data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success update users"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Users
      summary: "Delete user"
      description: "Delete user using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to delete data."
          required: true
          in: path
          schema:
            description: "Id user 1."
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete User."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success delete users"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

### Endpoint Classses
  /classes:
    post:
      tags:
        - Classes
      summary: "Insert Data Class" 
      description: "Add class."
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InsertClassObject"
            example:
              name: "BE"
              class_code: "B13"
      responses:
        '201':
          description: "Success create data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                status: "Success"
                message: "Success add data."
                data:
                  id: 1
                  name: "BE"
                  class_code: "B13"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    get:
      tags:
        - Classes
      summary: "Get All Class And Search"
      description: "Get all class and can use query parameter to search. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: ""
          description: "No value in parameter."
          required: false
          in: query
          schema:
            type: string
            example: ""
        - name: name
          description: "Class Name"
          required: false
          in: query
          schema:
            type: string
            example: "BE"
      responses:
        '200':
          description: A list of classes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccesArrayClassResult"
              example:
                  status: "Success"
                  message: "Success get all classes"
                  data:
                    - id: 1
                      name: "BE"
                      class_code: "B13"
                    - id: 2
                      name: "FE"
                      class_code: "B10"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /classes/{id}:
    get:
      tags:
        - Classes
      summary: "Get data class by id class"
      description: "Get data class using id class at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id class to get data"
          required: true
          in: path
          schema:
            description: "Id class 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success get class by id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success get classes by id"
                  data:
                    id: 1
                    name: "BE"
                    class_code: "B13"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - Classes
      summary: "Update data Class"
      description: "Update data class using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id class to update data"
          required: true
          in: path
          schema:
            description: "Id class 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/EditClassObject"
            example:
              name: "BE"
              class_code: "B13"
      responses:
        '200':
          description: "Success update data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success update classes"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Classes
      summary: "Delete class"
      description: "Delete class using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id class to delete data."
          required: true
          in: path
          schema:
            description: "Id class 1."
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete Class."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success delete classes"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

### Endpoint Mentees
  /mentees:
    post:
      tags:
        - Mentees
      summary: "Insert Data Mentees" 
      description: "Add mentee."
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InsertMenteeObject"
            example:
              name: "Budiman"
              status: "unit 1"
              gender: "laki"
              nickname: "budi"
              address: "tng"
              home_address: "papua"
              email: "budi@mail.com"
              telegram: "budidoremi"
              discord: "budidiscord"
              phone: "08123"
              emegency_name: "yanto"
              emergency_phone: "08456"
              emergency_status: "orang tua"
              education_type: "IT"
              education_major: "sarjana"
              education_graduate: "2021"
              id_class: "1"
      responses:
        '201':
          description: "Success create data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                status: "Success"
                message: "Success add data."
                data:
                  id: 1
                  name: "Budiman"
                  status: "unit 1"
                  gender: "laki"
                  nickname: "budi"
                  address: "tng"
                  home_address: "papua"
                  email: "budi@mail.com"
                  telegram: "budidoremi"
                  discord: "budidiscord"
                  phone: "08123"
                  emegency_name: "yanto"
                  emergency_phone: "08456"
                  emergency_status: "orang tua"
                  education_type: "IT"
                  education_major: "sarjana"
                  education_graduate: "2021"
                  id_class: "1"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    get:
      tags:
        - Mentees
      summary: "Get All Mentees And Search"
      description: "Get all mentee and can use query parameter to search. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: ""
          description: "No value in parameter."
          required: false
          in: query
          schema:
            type: string
            example: ""
        - name: name
          description: "Mentee Name"
          required: false
          in: query
          schema:
            type: string
            example: "budiman"
      responses:
        '200':
          description: A list of mentees
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccesArrayMenteeResult"
              example:
                  status: "Success"
                  message: "Success get all mentees"
                  data:
                    - id: 1
                      name: "Budiman"
                      status: "unit 1"
                      gender: "laki"
                      nickname: "budi"
                      address: "tng"
                      home_address: "papua"
                      email: "budi@mail.com"
                      telegram: "budidoremi"
                      discord: "budidiscord"
                      phone: "08123"
                      emegency_name: "yanto"
                      emergency_phone: "08456"
                      emergency_status: "orang tua"
                      education_type: "IT"
                      education_major: "sarjana"
                      education_graduate: "2021"
                      id_class: "1"
                    - id: 2
                      name: "jasimin"
                      status: "unit 1"
                      gender: "wanita"
                      nickname: "mimin"
                      address: "tng"
                      home_address: "papua"
                      email: "min@mail.com"
                      telegram: "mimin"
                      discord: "mimindiscord"
                      phone: "08123"
                      emegency_name: "yanto"
                      emergency_phone: "08456"
                      emergency_status: "orang tua"
                      education_type: "IT"
                      education_major: "sarjana"
                      education_graduate: "2021"
                      id_class: "2"
                      
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
  /mentees/{id}:
    get:
      tags:
        - Mentees
      summary: "Get data mentee by id mentee"
      description: "Get data mentee using id mentee at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id mentee to get data"
          required: true
          in: path
          schema:
            description: "Id mentee 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success get mentee by id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success get mentee by id"
                  data:
                      id: 1
                      name: "Budiman"
                      status: "unit 1"
                      gender: "laki"
                      nickname: "budi"
                      address: "tng"
                      home_address: "papua"
                      email: "budi@mail.com"
                      telegram: "budidoremi"
                      discord: "budidiscord"
                      phone: "08123"
                      emegency_name: "yanto"
                      emergency_phone: "08456"
                      emergency_status: "orang tua"
                      education_type: "IT"
                      education_major: "sarjana"
                      education_graduate: "2021"
                      id_class: "1"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - Mentees
      summary: "Update data Mentee"
      description: "Update data mentee using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id mentee to update data"
          required: true
          in: path
          schema:
            description: "Id mentee 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/EditMenteeObject"
            example:
                      name: "Budiman"
                      status: "unit 1"
                      gender: "laki"
                      nickname: "budi"
                      address: "tng"
                      home_address: "papua"
                      email: "budi@mail.com"
                      telegram: "budidoremi"
                      discord: "budidiscord"
                      phone: "08123"
                      emegency_name: "yanto"
                      emergency_phone: "08456"
                      emergency_status: "orang tua"
                      education_type: "IT"
                      education_major: "sarjana"
                      education_graduate: "2021"
                      id_class: "1"
      responses:
        '200':
          description: "Success update data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success update mentees"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Mentees
      summary: "Delete mentee"
      description: "Delete mentee using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id mentee to delete data."
          required: true
          in: path
          schema:
            description: "Id mentee 1."
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete Mentee."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success delete mentees"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

### Endpoint Logs
  /logs:
    post:
      tags:
        - Logs
      summary: "Insert Data Logs/Feedback" 
      description: "Add Logs/Feedback."
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InsertLogObject"
            example:
              title: "Interview"
              feedback: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla interdum convallis tortor eget scelerisque. Sed diam risus, tincidunt at lacinia a, hendrerit at massa. Maecenas tincidunt convallis rhoncus. Maecenas augue tellus, interdum non nulla a, bibendum dapibus nulla. Nullam at lorem diam. Integer nec urna commodo, gravida est fringilla, ultricies velit. Suspendisse potenti."
              status: "Join class"
              id_mentee: "1"
              id_user: "1"
      responses:
        '201':
          description: "Success create data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                status: "Success"
                message: "Success add data."
                data:
                  id: 1
                  title: "Interview"
                  feedback: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla interdum convallis tortor eget scelerisque. Sed diam risus, tincidunt at lacinia a, hendrerit at massa. Maecenas tincidunt convallis rhoncus. Maecenas augue tellus, interdum non nulla a, bibendum dapibus nulla. Nullam at lorem diam. Integer nec urna commodo, gravida est fringilla, ultricies velit. Suspendisse potenti."
                  status: "Join class"
                  id_mentee: "1"
                  id_user: "1"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    get:
      tags:
        - Logs
      summary: "Get All Logs And Search"
      description: "Get all log and can use query parameter to search. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: ""
          description: "No value in parameter."
          required: false
          in: query
          schema:
            type: string
            example: ""
        - name: name
          description: "title log"
          required: false
          in: query
          schema:
            type: string
            example: "interview"
      responses:
        '200':
          description: A list of logs/feedback
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccesArrayLogResult"
              example:
                  status: "Success"
                  message: "Success get all logs"
                  data:
                    - id: 1
                      title: "Interview"
                      feedback: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla interdum convallis tortor eget scelerisque. Sed diam risus, tincidunt at lacinia a, hendrerit at massa. Maecenas tincidunt convallis rhoncus. Maecenas augue tellus, interdum non nulla a, bibendum dapibus nulla. Nullam at lorem diam. Integer nec urna commodo, gravida est fringilla, ultricies velit. Suspendisse potenti."
                      status: "Join class"
                      id_mentee: "1"
                      id_user: "1"
                    - id: 2
                      title: "End of section"
                      feedback: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla interdum convallis tortor eget scelerisque. Sed diam risus, tincidunt at lacinia a, hendrerit at massa. Maecenas tincidunt convallis rhoncus. Maecenas augue tellus, interdum non nulla a, bibendum dapibus nulla. Nullam at lorem diam. Integer nec urna commodo, gravida est fringilla, ultricies velit. Suspendisse potenti."
                      status: "continue section 2"
                      id_mentee: "2"
                      id_user: "2"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /logs/{id}:
    get:
      tags:
        - Logs
      summary: "Get data log by id log"
      description: "Get data log using id log at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id log to get data"
          required: true
          in: path
          schema:
            description: "Id log 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success get log by id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success get logs by id"
                  data:
                      id: 1
                      title: "Interview"
                      feedback: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla interdum convallis tortor eget scelerisque. Sed diam risus, tincidunt at lacinia a, hendrerit at massa. Maecenas tincidunt convallis rhoncus. Maecenas augue tellus, interdum non nulla a, bibendum dapibus nulla. Nullam at lorem diam. Integer nec urna commodo, gravida est fringilla, ultricies velit. Suspendisse potenti."
                      status: "Join class"
                      id_mentee: "1"
                      id_user: "1"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - Logs
      summary: "Update data Log"
      description: "Update data Log using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id log to update data"
          required: true
          in: path
          schema:
            description: "Id log 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/EditLogObject"
            example:
              id: 1
              title: "Interview"
              feedback: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla interdum convallis tortor eget scelerisque. Sed diam risus, tincidunt at lacinia a, hendrerit at massa. Maecenas tincidunt convallis rhoncus. Maecenas augue tellus, interdum non nulla a, bibendum dapibus nulla. Nullam at lorem diam. Integer nec urna commodo, gravida est fringilla, ultricies velit. Suspendisse potenti."
              status: "Join class"
              id_mentee: "1"
              id_user: "1"
      responses:
        '200':
          description: "Success update data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success update LogS"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Logs
      summary: "Delete Log"
      description: "Delete log using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id log to delete data."
          required: true
          in: path
          schema:
            description: "Id log 1."
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete Log."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success delete logs"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

####################################
#  COMPONENTS
####################################
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT Token that generate after login."

  schemas:

### User Schemas
    "GetUserObject":
      type: object
      properties:
        "id":
          type: integer
        "full_name":
          type: string
        "email":
          type: string
        "team":
          type: string
        "role":
          type: string
        "status":
          type: string    
    "ArrayUserObj":
      type: array
      items :
        $ref: "#/components/schemas/GetUserObject"
    "InsertUserObject":
      type: object
      properties:
        "full_name":
          type: string
        "email":
          type: string
        "password":
          type: string
        "team":
          type: string
        "status":
          type: string  
    "EditUserObject":
      type: object
      properties:
        "full_name":
          type: string
        "email":
          type: string
        "password":
          type: string
        "team":
          type: string
        "status":
          type: string

### Class Schemas
    "GetClassObject":
      type: object
      properties:
        "id":
          type: integer
        "name":
          type: string
        "class_code":
          type: string  
    "ArrayClassObj":
      type: array
      items :
        $ref: "#/components/schemas/GetClassObject"
    "InsertClassObject":
      type: object
      properties:
        "name":
          type: string
        "class_code":
          type: string 
    "EditClassObject":
      type: object
      properties:
        "name":
          type: string
        "class_code":
          type: string  

### Mentee Schemas
    "GetMenteeObject":
      type: object
      properties:
        "id":
          type: integer
        "name":
          type: string
        "status":
          type: string
        "gender":
          type: string
        "nickname":
          type: string
        "address":
          type: string    
        "home_address":
          type: string    
        "email":
          type: string    
        "telegram":
          type: string    
        "discord":
          type: string    
        "phone":
          type: string    
        "emergency_name":
          type: string    
        "emergency_phone":
          type: string    
        "emergency_status":
          type: string    
        "education_type":
          type: string    
        "education_major":
          type: string    
        "education_graduate":
          type: string    
        "id_class":
          type: string      
    "ArrayMenteeObj":
      type: array
      items :
        $ref: "#/components/schemas/GetMenteeObject"
    "InsertMenteeObject":
      type: object
      properties:
        "name":
          type: string
        "status":
          type: string
        "gender":
          type: string
        "nickname":
          type: string
        "address":
          type: string    
        "home_address":
          type: string    
        "email":
          type: string    
        "telegram":
          type: string    
        "discord":
          type: string    
        "phone":
          type: string    
        "emergency_name":
          type: string    
        "emergency_phone":
          type: string    
        "emergency_status":
          type: string    
        "education_type":
          type: string    
        "education_major":
          type: string    
        "education_graduate":
          type: string    
        "id_class":
          type: string   
    "EditMenteeObject":
      type: object
      properties:
        "name":
          type: string
        "status":
          type: string
        "gender":
          type: string
        "nickname":
          type: string
        "address":
          type: string    
        "home_address":
          type: string    
        "email":
          type: string    
        "telegram":
          type: string    
        "discord":
          type: string    
        "phone":
          type: string    
        "emergency_name":
          type: string    
        "emergency_phone":
          type: string    
        "emergency_status":
          type: string    
        "education_type":
          type: string    
        "education_major":
          type: string    
        "education_graduate":
          type: string    
        "id_class":
          type: string    

### Log Schemas
    "GetLogObject":
      type: object
      properties:
        "id":
          type: integer
        "title":
          type: string
        "feedback":
          type: string  
        "status":
          type: string  
        "id_mentee":
          type: integer  
        "id_user":
          type: integer  
    "ArrayLogObj":
      type: array
      items :
        $ref: "#/components/schemas/GetLogObject"
    "InsertLogObject":
      type: object
      properties:
        "title":
          type: string
        "feedback":
          type: string  
        "status":
          type: string  
        "id_mentee":
          type: integer  
        "id_user":
          type: integer  
    "EditLogObject":
      type: object
      properties:
        "title":
          type: string
        "feedback":
          type: string  
        "status":
          type: string  
        "id_mentee":
          type: integer  
        "id_user":
          type: integer  

### Other Schemas
    "ResponseWithoutData":
      type: object
      properties:
        status:
          type: string
        message:
          type: string
    "ResponseWithData":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          type: object
    "SuccesArrayUserResult":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          type: array
          items : 
            $ref: "#/components/schemas/ArrayUserObj"
    "SuccesArrayClassResult":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          type: array
          items : 
            $ref: "#/components/schemas/ArrayClassObj" 
    "SuccesArrayMenteeResult":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          type: array
          items : 
            $ref: "#/components/schemas/ArrayMenteeObj" 
    "SuccesArrayLogResult":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          type: array
          items : 
            $ref: "#/components/schemas/ArrayLogObj" 

### Responses Schemas
  responses:
    '200':
      description: "Success Process Data"
      content:
        application/json:
          schema:
            type: object
            properties:
              message: 
                type: string
              data:
                type: object
    '201':
      description: "Success Create Data"
      content:
        application/json:
          schema:
            type: object
            properties:
              message: 
                type: string
              data:
                type: object
    '400':
      description: "Wrong Request From User"
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. Please check your input."
    '401':
      description: "Authorization information is missing or invalid."
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. User not authorized for this request."
    '404':
      description: "Page not found or wrong url. Please check again."
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. User not authorized for this request."
    '500':
      description: "Error process on server"
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. Please check server."